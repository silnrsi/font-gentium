lookup di_sub {
  lookupflag 0;
    sub @cno_dotlss by @c_dotlss;
} di_sub;

@c_i_tilde_blw = [LtnSmITildeBlw LtnSmITildeBlw.SItal];
@c_di_tilde_blw = [LtnSmI.Dotless LtnSmI.Dotless.SItal];
@c_i_dot_blw = [LtnSmIDotBlw LtnSmIDotBlw.SItal];
@c_di_dot_blw = [LtnSmI.Dotless LtnSmI.Dotless.SItal];

lookup di_csub {
  lookupflag 0;
    sub @c_i_tilde_blw by @c_di_tilde_blw CombTildeBlw;
    sub @c_i_dot_blw by @c_di_dot_blw CombDotBlw;
    sub LtnSmIOgonek by LtnSmI.Dotless CombOgonek;
    # sub LtnSmIRetrHook by LtnSmI.Dotless CombOgonek.RetroHook; # wrong kind of RetrHook
} di_csub;

# Use markClasses from psfmakefea since they can be used as glyph classes
@c_u_diacs = @_U;
@c_non_u_diacs = [@_L @_O @_H @R_];

@c_i_diac_blw = [@c_i_tilde_blw @c_i_dot_blw LtnSmIOgonek];

lookup di_ctx {
  lookupflag 0;
    sub @cno_dotlss'lookup di_sub  @c_u_diacs' ;
    sub @cno_dotlss'lookup di_sub  @c_non_u_diacs' @c_u_diacs' ;
    sub @cno_dotlss'lookup di_sub  @c_non_u_diacs' @c_non_u_diacs' @c_u_diacs' ;
    sub @cno_dotlss'lookup di_sub  @c_non_u_diacs' @c_non_u_diacs' @c_non_u_diacs' @c_u_diacs' ;
    sub @cno_dotlss'lookup di_sub  @c_non_u_diacs' @c_non_u_diacs' @c_non_u_diacs' @c_non_u_diacs' @c_u_diacs' ;
    sub @c_i_diac_blw'lookup di_csub  @c_u_diacs' ;
    sub @c_i_diac_blw'lookup di_csub  @c_non_u_diacs' @c_u_diacs' ;
    sub @c_i_diac_blw'lookup di_csub  @c_non_u_diacs' @c_non_u_diacs' @c_u_diacs' ;
    sub @c_i_diac_blw'lookup di_csub  @c_non_u_diacs' @c_non_u_diacs' @c_non_u_diacs' @c_u_diacs' ;
    sub @c_i_diac_blw'lookup di_csub  @c_non_u_diacs' @c_non_u_diacs' @c_non_u_diacs' @c_non_u_diacs' @c_u_diacs' ;
} di_ctx;

lookup vd_sub {
  lookupflag MarkAttachmentType @_U;
    sub CombCircum CombAcute  by CombCircumAcute.VN;
    sub CombCircum CombGrave  by CombCircumGrave.VN;
    sub CombCircum CombTilde  by CombCircumTilde.VN;
    sub CombCircum CombHookAbv  by CombCircumHook.VN;
    sub CombBreve CombAcute  by CombBreveAcute.VN;
    sub CombBreve CombGrave  by CombBreveGrave.VN;
    sub CombBreve CombTilde  by CombBreveTilde.VN;
    sub CombBreve CombHookAbv  by CombBreveHook.VN;
} vd_sub;

lookup vc_sub {
  lookupflag 0;
    sub @cno_viet by @c_viet;
} vc_sub;

lookup ss_sub {
  lookupflag 0;
    sub @cno_Sup by @c_Sup;
} ss_sub;

lookup ss_ctx {
  lookupflag 0;
    sub @c_superscripts @cno_Sup' lookup ss_sub;
} ss_ctx;

lookup y_ognk_sub {
  lookupflag 0;
    sub LtnSmY CombOgonek by LtnSmYOgonek;
    sub LtnSmY CombOgonek.RetroHook by LtnSmYOgonek.RetroHook;
} y_ognk_sub;

# Handle bridging diacritics
@c_cgj = [CombGraphemeJoiner];
@c_takes_highmidlow_diac = [@c_takes_high_diac @c_takes_mid_diac @c_takes_low_diac];
@c_takes_highmid_diac = [@c_takes_high_diac @c_takes_mid_diac];
@c_takes_midlow_diac = [@c_takes_mid_diac @c_takes_low_diac];
@c_takes_belowhighlow_diac = [@c_takes_belowhigh_diac @c_takes_belowlow_diac];

def CGJSeq(n) {
    return ["@c_cgj @_U @_L", "@c_cgj @_L @_U", "@c_cgj @_U", "@c_cgj @_L", ""]
} CGJSeq;

### Move dbl diac over two base glyphs if needed
# high  - where bridge is higher than default
lookup dbl_diac_high {
  lookupflag 0;
    sub @cno_high by @c_high;
} dbl_diac_high;

lookup dbl_diac_mid {
  lookupflag 0;
    sub @cno_mid by @c_mid;
} dbl_diac_mid;

lookup dbl_diac_low {
  lookupflag 0;
    sub @cno_low by @c_low;
} dbl_diac_low;

# Lower dbl diac over two lower glyphs handling diacs on bases
#  or raise dbl diac if over higher glyphs with diacs on bases
lookup dbl_diac_abv_move { # Below rules that do not end with U will match a trailing U
  lookupflag 0;
do
  forlet cgj_combo = CGJSeq(0); # one arg required but not used
  {
    sub @c_takes_highmid_diac @_U @cno_high' lookup dbl_diac_high $cgj_combo @c_takes_highmidlow_diac;
    sub @c_takes_highmidlow_diac @cno_high' lookup dbl_diac_high $cgj_combo @c_takes_highmid_diac @_U;
    sub @c_takes_highmidlow_diac @_U @cno_high' lookup dbl_diac_high $cgj_combo @c_takes_highmid_diac @_U;

    sub @c_takes_mid_diac @cno_mid' lookup dbl_diac_mid $cgj_combo @c_takes_midlow_diac;
    sub @c_takes_low_diac @cno_mid' lookup dbl_diac_mid $cgj_combo @c_takes_mid_diac;
    # leave the below at default level
    # sub @c_takes_low_diac @_U @cno_mid' lookup dbl_diac_mid $cgj_combo @c_takes_midlow_diac;
    # sub @c_takes_low_diac @cno_mid' lookup dbl_diac_mid $cgj_combo @c_takes_low_diac @_U;

    ignore sub @c_takes_low_diac @cno_low' $cgj_combo @c_takes_low_diac @_U;
    # Ignores seqs with U over first base
    sub @c_takes_low_diac @cno_low' lookup dbl_diac_low $cgj_combo @c_takes_low_diac;
  }
} dbl_diac_abv_move;

### Move dbl diac under two glyphs if needed
lookup dbl_diac_blwhigh {
  lookupflag 0;
    sub @cno_blwhigh by @c_blwhigh;
} dbl_diac_blwhigh;

# blwlow - where bridge below is lower than default
lookup dbl_diac_blwlow {
  lookupflag 0;
    sub @cno_blwlow by @c_blwlow;
} dbl_diac_blwlow;

# Raise dbl diac under two lower glyphs with descenders handling diacs on bases
#  or lower dbl diac if under low glyphs with diacs on bases
lookup dbl_diac_blw_move { # Below rules that do not end with L will match a trailing L
  lookupflag 0;
do
  forlet cgj_combo = CGJSeq(0); # one arg required but not used
  {
    sub @c_takes_belowlow_diac @_L @cno_blwlow' lookup dbl_diac_blwlow $cgj_combo @c_takes_belowhighlow_diac;
    sub @c_takes_belowhighlow_diac @cno_blwlow' lookup dbl_diac_blwlow $cgj_combo @c_takes_belowlow_diac @_L;
    sub @c_takes_belowhighlow_diac @_L @cno_blwlow' lookup dbl_diac_blwlow $cgj_combo @c_takes_belowlow_diac @_L;

    ignore sub @c_takes_belowhigh_diac @cno_blwhigh' $cgj_combo @c_takes_belowhigh_diac @_L;
    # Ignores seqs with L over first base
    sub @c_takes_belowhigh_diac @cno_blwhigh' lookup dbl_diac_blwhigh $cgj_combo @c_takes_belowhigh_diac;
  }
} dbl_diac_blw_move;

### Raise l ap under two glyphs without descenders
# lhigh - above bridges where L AP is raised
lookup dbl_diac_lhigh {
  lookupflag 0;
    sub @cno_lhigh by @c_lhigh;
} dbl_diac_lhigh;

# Ignores seqs with diacs under either (or both) base
lookup dbl_diac_abv_raise_l { #raise l ap on dbl diac under two glyphs without descenders
  lookupflag 0;
    sub @c_takes_belowhigh_diac @cno_lhigh' lookup dbl_diac_lhigh @c_cgj @_L @_U @c_takes_belowhigh_diac;
    sub @c_takes_belowhigh_diac @cno_lhigh' lookup dbl_diac_lhigh @c_cgj @_U @_L @c_takes_belowhigh_diac;
    sub @c_takes_belowhigh_diac @cno_lhigh' lookup dbl_diac_lhigh @c_cgj @_L @c_takes_belowhigh_diac;
} dbl_diac_abv_raise_l;

### Lower u ap over two lower glyphs
# umid and ulow - below bridges where U AP is lowered
lookup dbl_diac_umid {
  lookupflag 0;
    sub @cno_umid by @c_umid;
} dbl_diac_umid;

lookup dbl_diac_ulow {
  lookupflag 0;
    sub @cno_ulow by @c_ulow;
} dbl_diac_ulow;

# Ignores seqs with diacs over either (or both) base
lookup dbl_diac_blw_lower_u { #lower u ap on dbl diac over two lower glyphs
  lookupflag 0;
    sub @c_takes_mid_diac @cno_umid' lookup dbl_diac_umid @c_cgj @_U @_L @c_takes_midlow_diac;
    sub @c_takes_mid_diac @cno_umid' lookup dbl_diac_umid @c_cgj @_L @_U @c_takes_midlow_diac;
    sub @c_takes_mid_diac @cno_umid' lookup dbl_diac_umid @c_cgj @_U @c_takes_midlow_diac;
    sub @c_takes_low_diac @cno_umid' lookup dbl_diac_umid @c_cgj @_U @_L @c_takes_mid_diac;
    sub @c_takes_low_diac @cno_umid' lookup dbl_diac_umid @c_cgj @_L @_U @c_takes_mid_diac;
    sub @c_takes_low_diac @cno_umid' lookup dbl_diac_umid @c_cgj @_U @c_takes_mid_diac;

    sub @c_takes_low_diac @cno_ulow' lookup dbl_diac_ulow @c_cgj @_U @_L @c_takes_low_diac;
    sub @c_takes_low_diac @cno_ulow' lookup dbl_diac_ulow @c_cgj @_L @_U @c_takes_low_diac;
    sub @c_takes_low_diac @cno_ulow' lookup dbl_diac_ulow @c_cgj @_U @c_takes_low_diac;
} dbl_diac_blw_lower_u;

### Handle two upper dbl diac seqs by moving to avoid collision
# also handle a third diac below (either dbl or not), all diacs separated by cgj
# assumes c_low, c_mid, c_high (and their matching cno classes) are parallel
lookup dbl_diac_abv_move_seq { # below rule order is important, glyph classes overlap and are not optimized
  lookupflag 0;
  sub @c_takes_low_diac @cno_low' lookup dbl_diac_low @c_cgj' @cno_mid' lookup dbl_diac_mid @c_takes_low_diac;
  sub @c_takes_midlow_diac @cno_mid' lookup dbl_diac_mid @c_cgj' @cno_mid' @c_takes_midlow_diac; #assume low low handled above
  sub @c_takes_highmidlow_diac @cno_high' @c_cgj' @cno_high' lookup dbl_diac_high @c_takes_highmidlow_diac;

  # handle trailing lower diac
  sub @c_takes_low_diac @cno_low' lookup dbl_diac_low @c_cgj' @cno_mid' lookup dbl_diac_mid @c_cgj @_L @c_takes_low_diac;
  sub @c_takes_midlow_diac @cno_mid' lookup dbl_diac_mid @c_cgj' @cno_mid' @c_cgj @_L @c_takes_midlow_diac;
  sub @c_takes_highmidlow_diac @cno_high' @c_cgj' @cno_high' lookup dbl_diac_high @c_cgj @_L @c_takes_highmidlow_diac;

  # handle trailing lower dbl diac
  sub @c_takes_low_diac @cno_low' lookup dbl_diac_low @c_cgj' @cno_mid' lookup dbl_diac_mid @c_cgj @cno_blwlow @c_takes_low_diac;
  sub @c_takes_midlow_diac @cno_mid' lookup dbl_diac_mid @c_cgj' @cno_mid' @c_cgj @cno_blwlow @c_takes_midlow_diac;
  sub @c_takes_highmidlow_diac @cno_high' @c_cgj' @cno_high' lookup dbl_diac_high @c_cgj @cno_blwlow @c_takes_highmidlow_diac;
} dbl_diac_abv_move_seq;

### Raise diac below (dbl or not) two glyphs without descenders with two upper dbl diacs
# assumes dbl_diac_abv_move_seq (with trailing lower diac or lower dbl diac) has been applied
lookup dbl_diac_abv_raise_blw {
  lookupflag 0;
  sub @c_takes_belowhigh_diac @c_low @c_cgj @c_mid' lookup dbl_diac_lhigh @c_cgj @_L @c_takes_belowhigh_diac;
  sub @c_takes_belowhigh_diac @c_mid @c_cgj @cno_mid' lookup dbl_diac_lhigh  @c_cgj @_L@c_takes_belowhigh_diac;
  sub @c_takes_belowhigh_diac @cno_high @c_cgj @c_high' lookup dbl_diac_lhigh  @c_cgj @_L@c_takes_belowhigh_diac;

  sub @c_takes_belowhigh_diac @c_low @c_cgj @c_mid @c_cgj @cno_blwlow' lookup dbl_diac_blwhigh @c_takes_belowhigh_diac;
  sub @c_takes_belowhigh_diac @c_mid @c_cgj @cno_mid @c_cgj @cno_blwlow' lookup dbl_diac_blwhigh @c_takes_belowhigh_diac;
  sub @c_takes_belowhigh_diac @cno_high @c_cgj @c_high @c_cgj @cno_blwlow' lookup dbl_diac_blwhigh @c_takes_belowhigh_diac;
} dbl_diac_abv_raise_blw;

### Handle upper dbl diac followed by lower dbl diac with no other diacs
# diacs separate by cgj
lookup dbl_diac_abv_and_blw_move { 
  lookupflag 0;
    # Lower dbl diac over two lower glyphs. using cno_blwhigh is arbitrary
    sub @c_takes_mid_diac @cno_mid' lookup dbl_diac_mid @c_cgj @cno_blwhigh @c_takes_midlow_diac;
    sub @c_takes_midlow_diac @cno_mid' lookup dbl_diac_mid @c_cgj @cno_blwhigh @c_takes_mid_diac;

    sub @c_takes_low_diac @cno_low' lookup dbl_diac_low @c_cgj @cno_blwhigh @c_takes_low_diac;

    # Raise dbl diac under two lower glyphs
    #  first dbl diac may be substituted by above rules. using cno_mid is arbitrary
    sub @c_takes_belowhigh_diac @cno_mid @c_cgj @cno_blwhigh' lookup dbl_diac_blwhigh @c_takes_belowhigh_diac;
    sub @c_takes_belowhigh_diac @c_mid @c_cgj @cno_blwhigh' lookup dbl_diac_blwhigh @c_takes_belowhigh_diac;
    sub @c_takes_belowhigh_diac @c_low @c_cgj @cno_blwhigh' lookup dbl_diac_blwhigh @c_takes_belowhigh_diac;
} dbl_diac_abv_and_blw_move;

# End of bridging diacritics

lookup sc1_sub {
  lookupflag 0;
    # sub @cno_sc by @c_sc;
    sub @cno_smcp by @c_smcp;
    sub LtnSmRBar by LtnSmRBarredStem.sc;
    sub CySmPalochka by CyPalochka.sc;
    sub LtnSmTurnedE by LtnSmRevE.sc;
} sc1_sub;

lookup sc2_sub {
  lookupflag 0;
    sub @cno_c2sc by @c_c2sc;
    sub CyPalochka by CyPalochka.sc;
} sc2_sub;

lookup sups_sub {
  lookupflag 0;
    sub @cno_sups by @c_sups;
} sups_sub;

lookup subs_sub {
  lookupflag 0;
    sub @cno_subs by @c_subs;
} subs_sub;

# Charis & Gentium
do let f = info("familyName");
   if f.find("Charis") != -1 or f.find("Gentium") != -1; {
lookup lnum_sub {
  lookupflag 0;
    sub @c_osf by @cno_osf;
} lnum_sub;

lookup onum_sub {
  lookupflag 0;
    sub @cno_osf by @c_osf;
} onum_sub;
}

lookup f_sub {
  lookupflag 0;
    sub LtnSmF LtnSmI  by LtnLigSmFSmI;
    sub LtnSmF LtnSmL  by LtnLigSmFSmL;
    sub LtnSmF LtnSmF LtnSmI  by LtnLigSmFSmFSmI;
    sub LtnSmF LtnSmF LtnSmL  by LtnLigSmFSmFSmL;
    sub LtnSmF LtnSmF  by LtnLigSmFSmF;
} f_sub;

# For frac feature: 
# See https://ilovetypography.com/OpenType/opentype-features.html for algorithm
#  Except use a lookup block instead of just a feature block
# Since all rules in the lookup must be of the same type, 
#  the input sequence must be marked in all rules (so they are all type 6)
# Subtables are applied in order until one matches, then the lkup moves to the next glyph to be processed
@c_slash = [Solidus FracSlash DivisionSlash];

lookup frac_sub {
  lookupflag 0;
    sub @c_slash' by FracSlash.frac;
    sub FracSlash.frac @cno_dnom' by @c_dnom;
    sub @c_dnom @cno_dnom' by @c_dnom;
    sub @cno_numr' by @c_numr;
} frac_sub;

# must come after lkups used by smcp (and c2sc ?)
lookup srb_sub {
  lookupflag 0;
    sub @cno_Serb by @c_Serb;
} srb_sub;

# used to generate glyph classes
def SeqGen(n) {
    l = list()
    for i in range(1, 6):
        for j in range(1, 6):
            ltr = n + str(i) + str(j)
            l.append(ltr)
    return l
} SeqGen;

# glyph classes used below
do  let l = SeqGen('TnLtrSeg');
    let s = ' '.join(l);
    {
    @TnLtrSeg = [$s];
    }
# @TnLtrSeg = [];

do  let l = SeqGen('TnContRt');
    let s = ' '.join(l);
    {
    @TnContRt = [$s];
    }
# @TnContRt = [];

do  let l = SeqGen('TnContLft');
    let s = ' '.join(l);
    {
    @TnContLft = [$s];
    }
# @TnContLft = [];

# create a glyph class of all non-tone glyphs
def NonTns() {
    l = list()
    for g in allglyphs():
        if not re.search('.*Tn(Ltr|Cont|Staff).*', g):
            l.append(g)
    return l
} NonTns;

do  let l = NonTns();
    let s = ' '.join(l);
    {
    @NonTn = [$s];
    }
# @NonTn = [];

@TnLtrs = [TnLtr5 TnLtr4 TnLtr3 TnLtr2 TnLtr1 ];
@LftStemTnLtrs = [LftStemTnLtr5 LftStemTnLtr4 LftStemTnLtr3 LftStemTnLtr2 LftStemTnLtr1 ];

# substitute contours for tone letters
#  based on the level of the current tone and the following (or preceding) one
# substitute a staff for the last (or first) tone letter
# glyphs will connect in their default position
# the glyph on the end of the sequence opposite the staff needs spacing added, see tne_ctx
#  (staffs already have spacing)
# supports any number of tone bars
lookup tn_ctx {
  lookupflag 0;
    # ignore two isolated tones of the same level next to each
    #  unfortunately will not match if they are at a segment boundary
    ignore sub @NonTn TnLtr5' TnLtr5' @NonTn;
    ignore sub @NonTn TnLtr4' TnLtr4' @NonTn;
    ignore sub @NonTn TnLtr3' TnLtr3' @NonTn;
    ignore sub @NonTn TnLtr2' TnLtr2' @NonTn;
    ignore sub @NonTn TnLtr1' TnLtr1' @NonTn;

    sub @TnLtrs' [TnLtr1 ] by [TnLtrSeg51 TnLtrSeg41 TnLtrSeg31 TnLtrSeg21 TnLtrSeg11 ];
    sub @TnLtrs' [TnLtr2 ] by [TnLtrSeg52 TnLtrSeg42 TnLtrSeg32 TnLtrSeg22 TnLtrSeg12 ];
    sub @TnLtrs' [TnLtr3 ] by [TnLtrSeg53 TnLtrSeg43 TnLtrSeg33 TnLtrSeg23 TnLtrSeg13 ];
    sub @TnLtrs' [TnLtr4 ] by [TnLtrSeg54 TnLtrSeg44 TnLtrSeg34 TnLtrSeg24 TnLtrSeg14 ];
    sub @TnLtrs' [TnLtr5 ] by [TnLtrSeg55 TnLtrSeg45 TnLtrSeg35 TnLtrSeg25 TnLtrSeg15 ];
    sub @TnLtrSeg @TnLtrs' by [TnStaffRt5 TnStaffRt4 TnStaffRt3 TnStaffRt2 TnStaffRt1 ];

    ignore sub @NonTn LftStemTnLtr5' LftStemTnLtr5' @NonTn;
    ignore sub @NonTn LftStemTnLtr4' LftStemTnLtr4' @NonTn;
    ignore sub @NonTn LftStemTnLtr3' LftStemTnLtr3' @NonTn;
    ignore sub @NonTn LftStemTnLtr2' LftStemTnLtr2' @NonTn;
    ignore sub @NonTn LftStemTnLtr1' LftStemTnLtr1' @NonTn;

    sub [TnStaffLft1 TnLtrSeg11 TnLtrSeg21 TnLtrSeg31 TnLtrSeg41 TnLtrSeg51 ] @LftStemTnLtrs' by 
      [TnLtrSeg15 TnLtrSeg14 TnLtrSeg13 TnLtrSeg12 TnLtrSeg11 ];
    sub [TnStaffLft2 TnLtrSeg12 TnLtrSeg22 TnLtrSeg32 TnLtrSeg42 TnLtrSeg52 ] @LftStemTnLtrs' by 
      [TnLtrSeg25 TnLtrSeg24 TnLtrSeg23 TnLtrSeg22 TnLtrSeg21 ];
    sub [TnStaffLft3 TnLtrSeg13 TnLtrSeg23 TnLtrSeg33 TnLtrSeg43 TnLtrSeg53 ] @LftStemTnLtrs' by 
      [TnLtrSeg35 TnLtrSeg34 TnLtrSeg33 TnLtrSeg32 TnLtrSeg31 ];
    sub [TnStaffLft4 TnLtrSeg14 TnLtrSeg24 TnLtrSeg34 TnLtrSeg44 TnLtrSeg54 ] @LftStemTnLtrs' by 
      [TnLtrSeg45 TnLtrSeg44 TnLtrSeg43 TnLtrSeg42 TnLtrSeg41 ];
    sub [TnStaffLft5 TnLtrSeg15 TnLtrSeg25 TnLtrSeg35 TnLtrSeg45 TnLtrSeg55 ] @LftStemTnLtrs' by 
      [TnLtrSeg55 TnLtrSeg54 TnLtrSeg53 TnLtrSeg52 TnLtrSeg51 ];
    sub @LftStemTnLtrs' @LftStemTnLtrs by 
      [TnStaffLft5 TnStaffLft4 TnStaffLft3 TnStaffLft2 TnStaffLft1];
} tn_ctx;

# substitute a glyph with spacing for one without spacing in right stem clusters
lookup tner_sub {
  lookupflag 0;
    sub @TnLtrSeg by @TnContRt;
} tner_sub;

# substitute a glyph with spacing for one without spacing in left stem clusters
lookup tnel_sub {
  lookupflag 0;
    sub @TnLtrSeg by @TnContLft;
} tnel_sub;

@TnStaffRt = [TnStaffRt5 TnStaffRt4 TnStaffRt3 TnStaffRt2 TnStaffRt1 ];
@TnStaffLft = [TnStaffLft5 TnStaffLft4 TnStaffLft3 TnStaffLft2 TnStaffLft1 ];

# add a spacing glyph to the opposite end of a cluster from the staff
#  supports up to seven tone bars
lookup tne_ctx {
  lookupflag 0;
    sub @TnLtrSeg'lookup tner_sub @TnLtrSeg' @TnLtrSeg' @TnLtrSeg' @TnLtrSeg' @TnLtrSeg' @TnStaffRt'; 
    sub @TnLtrSeg'lookup tner_sub @TnLtrSeg' @TnLtrSeg' @TnLtrSeg' @TnLtrSeg' @TnStaffRt'; 
    sub @TnLtrSeg'lookup tner_sub @TnLtrSeg' @TnLtrSeg' @TnLtrSeg' @TnStaffRt';
    sub @TnLtrSeg'lookup tner_sub @TnLtrSeg' @TnLtrSeg' @TnStaffRt';
    sub @TnLtrSeg'lookup tner_sub @TnLtrSeg' @TnStaffRt';
    sub @TnLtrSeg'lookup tner_sub @TnStaffRt';

    sub @TnStaffLft' @TnLtrSeg' @TnLtrSeg' @TnLtrSeg' @TnLtrSeg' @TnLtrSeg' @TnLtrSeg'lookup tnel_sub;
    sub @TnStaffLft' @TnLtrSeg' @TnLtrSeg' @TnLtrSeg' @TnLtrSeg' @TnLtrSeg'lookup tnel_sub;
    sub @TnStaffLft' @TnLtrSeg' @TnLtrSeg' @TnLtrSeg' @TnLtrSeg'lookup tnel_sub;
    sub @TnStaffLft' @TnLtrSeg' @TnLtrSeg' @TnLtrSeg'lookup tnel_sub;
    sub @TnStaffLft' @TnLtrSeg' @TnLtrSeg'lookup tnel_sub;
    sub @TnStaffLft' @TnLtrSeg'lookup tnel_sub;
} tne_ctx;

@TnLtrsNo = [TnLtr5no TnLtr4no TnLtr3no TnLtr2no TnLtr1no ];
@LftStemTnLtrsNo = [LftStemTnLtr5no LftStemTnLtr4no LftStemTnLtr3no LftStemTnLtr2no LftStemTnLtr1no ];

@TnStaffRtNo = [TnStaffRt5no TnStaffRt4no TnStaffRt3no TnStaffRt2no TnStaffRt1no ];
@TnStaffLftNo = [TnStaffLft5no TnStaffLft4no TnStaffLft3no TnStaffLft2no TnStaffLft1no ];

# substitute numerals for tone bars
lookup tnn_sub {
  lookupflag 0;
    sub TnLtr5 by [SupFive ];
    sub TnLtr4 by [SupFour ];
    sub TnLtr3 by [SupThree ];
    sub TnLtr2 by [SupTwo ];
    sub TnLtr1 by [SupOne ];
    sub LftStemTnLtr5 by [SupFive ];
    sub LftStemTnLtr4 by [SupFour ];
    sub LftStemTnLtr3 by [SupThree ];
    sub LftStemTnLtr2 by [SupTwo ];
    sub LftStemTnLtr1 by [SupOne ];
} tnn_sub;

# the following is to turn tone segments (and contours) into numerals
@RtTnLtrSeg5 = [TnLtrSeg51 TnLtrSeg52 TnLtrSeg53 TnLtrSeg54 TnLtrSeg55];
@RtTnLtrSeg4 = [TnLtrSeg41 TnLtrSeg42 TnLtrSeg43 TnLtrSeg44 TnLtrSeg45];
@RtTnLtrSeg3 = [TnLtrSeg31 TnLtrSeg32 TnLtrSeg33 TnLtrSeg34 TnLtrSeg35];
@RtTnLtrSeg2 = [TnLtrSeg21 TnLtrSeg22 TnLtrSeg23 TnLtrSeg24 TnLtrSeg25];
@RtTnLtrSeg1 = [TnLtrSeg11 TnLtrSeg12 TnLtrSeg13 TnLtrSeg14 TnLtrSeg15];

@TnContRt5 = [TnContRt51 TnContRt52 TnContRt53 TnContRt54 TnContRt55];
@TnContRt4 = [TnContRt41 TnContRt42 TnContRt43 TnContRt44 TnContRt45];
@TnContRt3 = [TnContRt31 TnContRt32 TnContRt33 TnContRt34 TnContRt35];
@TnContRt2 = [TnContRt21 TnContRt22 TnContRt23 TnContRt24 TnContRt25];
@TnContRt1 = [TnContRt11 TnContRt12 TnContRt13 TnContRt14 TnContRt15];

@LftTnLtrSeg5 = [TnLtrSeg15 TnLtrSeg25 TnLtrSeg35 TnLtrSeg45 TnLtrSeg55];
@LftTnLtrSeg4 = [TnLtrSeg14 TnLtrSeg24 TnLtrSeg34 TnLtrSeg44 TnLtrSeg54];
@LftTnLtrSeg3 = [TnLtrSeg13 TnLtrSeg23 TnLtrSeg33 TnLtrSeg43 TnLtrSeg53];
@LftTnLtrSeg2 = [TnLtrSeg12 TnLtrSeg22 TnLtrSeg32 TnLtrSeg42 TnLtrSeg52];
@LftTnLtrSeg1 = [TnLtrSeg11 TnLtrSeg21 TnLtrSeg31 TnLtrSeg41 TnLtrSeg51];

@TnContLft5 = [TnContLft15 TnContLft25 TnContLft35 TnContLft45 TnContLft55];
@TnContLft4 = [TnContLft14 TnContLft24 TnContLft34 TnContLft44 TnContLft54];
@TnContLft3 = [TnContLft13 TnContLft23 TnContLft33 TnContLft43 TnContLft53];
@TnContLft2 = [TnContLft12 TnContLft22 TnContLft32 TnContLft42 TnContLft52];
@TnContLft1 = [TnContLft11 TnContLft21 TnContLft31 TnContLft41 TnContLft51];

@TnStaffRt = [TnStaffRt5 TnStaffRt4 TnStaffRt3 TnStaffRt2 TnStaffRt1 ];
@TnStaffLft = [TnStaffLft5 TnStaffLft4 TnStaffLft3 TnStaffLft2 TnStaffLft1 ];
@SupNum = [SupFive SupFour SupThree SupTwo SupOne];

lookup tnnr_sub {
  lookupflag 0;
    sub [@RtTnLtrSeg5 @TnContRt5] by SupFive;
    sub [@RtTnLtrSeg4 @TnContRt4] by SupFour;
    sub [@RtTnLtrSeg3 @TnContRt3] by SupThree;
    sub [@RtTnLtrSeg2 @TnContRt2] by SupTwo;
    sub [@RtTnLtrSeg1 @TnContRt1] by SupOne;
    sub @TnStaffRt by @SupNum;
} tnnr_sub;

lookup tnnl_sub {
  lookupflag 0;
    sub [@LftTnLtrSeg5 @TnContLft5] by SupFive;
    sub [@LftTnLtrSeg4 @TnContLft4] by SupFour;
    sub [@LftTnLtrSeg3 @TnContLft3] by SupThree;
    sub [@LftTnLtrSeg2 @TnContLft2] by SupTwo;
    sub [@LftTnLtrSeg1 @TnContLft1] by SupOne;
    sub @TnStaffLft by @SupNum;
} tnnl_sub;

lookup tnn_ctx {
  lookupflag 0;
    sub @TnContRt'lookup tnnr_sub @TnLtrSeg'lookup tnnr_sub @TnLtrSeg'lookup tnnr_sub 
      @TnLtrSeg'lookup tnnr_sub @TnLtrSeg'lookup tnnr_sub @TnLtrSeg'lookup tnnr_sub 
      @TnStaffRt'lookup tnnr_sub; 
    sub @TnContRt'lookup tnnr_sub @TnLtrSeg'lookup tnnr_sub @TnLtrSeg'lookup tnnr_sub 
      @TnLtrSeg'lookup tnnr_sub @TnLtrSeg'lookup tnnr_sub 
      @TnStaffRt'lookup tnnr_sub; 
    sub @TnContRt'lookup tnnr_sub @TnLtrSeg'lookup tnnr_sub @TnLtrSeg'lookup tnnr_sub 
      @TnLtrSeg'lookup tnnr_sub 
      @TnStaffRt'lookup tnnr_sub; 
    sub @TnContRt'lookup tnnr_sub @TnLtrSeg'lookup tnnr_sub @TnLtrSeg'lookup tnnr_sub 
      @TnStaffRt'lookup tnnr_sub; 
    sub @TnContRt'lookup tnnr_sub @TnLtrSeg'lookup tnnr_sub 
      @TnStaffRt'lookup tnnr_sub; 
    sub @TnContRt'lookup tnnr_sub 
      @TnStaffRt'lookup tnnr_sub; 

    sub @TnStaffLft'lookup tnnl_sub @TnLtrSeg'lookup tnnl_sub @TnLtrSeg'lookup tnnl_sub 
      @TnLtrSeg'lookup tnnl_sub @TnLtrSeg'lookup tnnl_sub @TnLtrSeg'lookup tnnl_sub 
      @TnContLft'lookup tnnl_sub;
    sub @TnStaffLft'lookup tnnl_sub @TnLtrSeg'lookup tnnl_sub @TnLtrSeg'lookup tnnl_sub 
      @TnLtrSeg'lookup tnnl_sub @TnLtrSeg'lookup tnnl_sub 
      @TnContLft'lookup tnnl_sub;
    sub @TnStaffLft'lookup tnnl_sub @TnLtrSeg'lookup tnnl_sub @TnLtrSeg'lookup tnnl_sub 
      @TnLtrSeg'lookup tnnl_sub 
      @TnContLft'lookup tnnl_sub;
    sub @TnStaffLft'lookup tnnl_sub @TnLtrSeg'lookup tnnl_sub @TnLtrSeg'lookup tnnl_sub 
      @TnContLft'lookup tnnl_sub;
    sub @TnStaffLft'lookup tnnl_sub @TnLtrSeg'lookup tnnl_sub 
      @TnContLft'lookup tnnl_sub;
    sub @TnStaffLft'lookup tnnl_sub 
      @TnContLft'lookup tnnl_sub;
} tnn_ctx;

# hide the tone bar staves
#  place after tone numbers lookup so it has less precedence
lookup tnh_sub {
  lookupflag 0;
    sub @TnLtrs by @TnLtrsNo;
    sub @LftStemTnLtrs by @LftStemTnLtrsNo;
    sub @TnStaffRt by @TnStaffRtNo;
    sub @TnStaffLft by @TnStaffLftNo;
} tnh_sub;

# Andika
do let f = info("familyName");
   if f.find("Andika") != -1; {
lookup one_sub {
  lookupflag 0;
    sub @cno_NoBase by @c_NoBase;
} one_sub;

lookup four_sub {
  lookupflag 0;
    sub @cno_Open by @c_Open;
} four_sub;

# Replace with two features that separately affect six and nine; drop backwards compatibility
# lookup six_sub {
#   lookupflag 0;
#     sub @cno_Diag by @c_Diag;
# } six_sub;

lookup six_sub {
  lookupflag 0;
    sub @cno_sixDiag by @c_sixDiag;
} six_sub;

lookup nine_sub {
  lookupflag 0;
    sub @cno_nineDiag by @c_nineDiag;
} nine_sub;

lookup seven_sub {
  lookupflag 0;
    sub @cno_Bar by @c_Bar;
} seven_sub;

lookup zero_sub {
  lookupflag 0;
    sub @cno_Slash by @c_Slash;
} zero_sub;
}

lookup bhk_sub {
  lookupflag 0;
    sub LtnCapBHook from [LtnCapBHook.TopBar ];
    sub LtnSmBHook.sc from [LtnSmBHook.TopBar.sc ];
} bhk_sub;

lookup dhk_sub {
  lookupflag 0;
    sub LtnCapDHook from [LtnCapDHook.TopBar ];
    sub LtnSmDHook.sc from [LtnSmDHook.TopBar.sc ];
} dhk_sub;

lookup ezhcurl_sub {
  lookupflag 0;
    sub LtnSmEzhCurl from [LtnSmEzhCurl.LrgBowl ];
} ezhcurl_sub;

lookup ezh_sub {
  lookupflag 0;
    sub LtnCapEzh from [LtnCapEzh.RevSigmaStyle ];
    sub CyCapAbkhasDze from [CyCapAbkhasDze.RevSigmaStyle ];
    sub LtnSmEzh.sc from [LtnSmEzh.RevSigmaStyle.sc ];
    sub CySmAbkhasDze.sc from [CySmAbkhasDze.RevSigmaStyle.sc ];
} ezh_sub;

lookup rams_sub {
  lookupflag 0;
    sub LtnSmRamsHorn from [LtnSmRamsHorn.LrgBowl LtnSmRamsHorn.GammaStyle ];
    sub LtnSupSmRamsHorn from [LtnSupSmRamsHorn.LrgBowl LtnSupSmRamsHorn.GammaStyle ];
} rams_sub;

lookup hstrk_sub {
  lookupflag 0;
    sub LtnCapHStrk from [LtnCapHStrk.VertStrk ];
    sub LtnSmHStrk.sc from [LtnSmHStrk.VertStrk.sc ];
} hstrk_sub;

# Andika
do let f = info("familyName");
   if f.find("Andika") != -1; {
# tail-i must come before barless-I (smcp is above) even though the tail-i cv## is higher
# so it has precedence if both feats are applied
# barless-I class will not match tail-i glyphs
# tail-i class will not match smcp glyphs but barless-I class will match smcp
# slant ital (below) will not match tail-i (ok) or barless-I (bad) classes
lookup itl_sub {
  lookupflag 0;
    sub @cno_TailI by @c_TailI;
} itl_sub;

# see notes on itl_sub lkup
lookup nobar_sub {
  lookupflag 0;
    sub @cno_nobar by @c_nobar;
} nobar_sub;

lookup jsrf_sub {
  lookupflag 0;
    sub LtnSmJ from [LtnSmJ.TopLftSerif ];
    sub LtnSubSmJ from [LtnSubSmJ.TopLftSerif ];
    sub ModSmJ from [ModSmJ.TopLftSerif ];
    sub LtnSmJCircum from [LtnSmJCircum.TopLftSerif ];
    sub LtnSmJCaron from [LtnSmJCaron.TopLftSerif ];
    sub LtnSmJStrk from [LtnSmJStrk.TopLftSerif ];
    sub LtnSmJCrossedTail from [LtnSmJCrossedTail.TopLftSerif ];
    sub ModSmJCrossedTail from [ModSmJCrossedTail.TopLftSerif ];
    sub LtnSmDotlessJ from [LtnSmDotlessJ.TopLftSerif ];
    sub ModSmJ.Dotless from [ModSmJ.Dotless.TopLftSerif ];
    sub LtnSmDotlessJStrk from [LtnSmDotlessJStrk.TopLftSerif ];
    sub LtnSupSmDotlessJStrk from [LtnSupSmDotlessJStrk.TopLftSerif ];
    sub LtnSmJCrossedTail.Dotless from [LtnSmJCrossedTail.Dotless.TopLftSerif ];
    sub ModSmJCrossedTail.Dotless from [ModSmJCrossedTail.Dotless.TopLftSerif ];
} jsrf_sub;

lookup j_sub {
  lookupflag 0;
    sub @cno_bartp by @c_bartp;
} j_sub;
}

lookup jstrk_sub {
  lookupflag 0;
    sub LtnSmDotlessJStrkHook from [LtnSmDotlessJStrkHook.DblSerif ];
} jstrk_sub;

# Andika
do let f = info("familyName");
   if f.find("Andika") != -1; {
lookup ltl_sub {
  lookupflag 0;
    sub @cno_TailL by @c_TailL;
} ltl_sub;
}

lookup engs_sub {
  lookupflag 0;
    sub LtnCapEng from [LtnCapEng.BaselineHook LtnCapEng.UCStyle LtnCapEng.Kom ];
    sub LtnSmEng.sc from [LtnSmEng.BaselineHook.sc LtnSmEng.UCStyle.sc LtnSmEng.Kom.sc ];
} engs_sub;

lookup nhk_sub {
  lookupflag 0;
    sub LtnCapNLftHook from [LtnCapNLftHook.UCStyle ];
    sub LtnSmNLftHook.sc from [LtnSmNLftHook.UCStyle.sc ];
} nhk_sub;

lookup opno_sub {
  lookupflag 0;
    sub LtnSmOpnO from [LtnSmOpnO.TopSerif ];
    sub LtnSupSmOpnO from [LtnSupSmOpnO.TopSerif ];
    sub LtnSmOpnORetrHook from [LtnSmOpnORetrHook.TopSerif ];
    sub LtnCapOpnO from [LtnCapOpnO.TopSerif ];
    sub LtnSmCapOpnO from [LtnSmCapOpnO.TopSerif ];
    sub LtnSmOpnO.sc from [LtnSmOpnO.TopSerif.sc ];
} opno_sub;

lookup ou_sub {
  lookupflag 0;
    sub LtnSmOu from [LtnSmOu.OpenTop ];
    sub LtnCapOu from [LtnCapOu.OpenTop ];
    sub ModCapOu from [ModCapOu.OpenTop ];
    sub LtnSmCapOu from [LtnSmCapOu.OpenTop ];
    sub LtnSmOu.sc from [LtnSmOu.OpenTop.sc ];
} ou_sub;

lookup phk_sub {
  lookupflag 0;
    sub LtnSmPHook from [LtnSmPHook.BowlHook ];
} phk_sub;

# Andika
do let f = info("familyName");
   if f.find("Andika") != -1; {
lookup qtl_sub {
  lookupflag 0;
    sub LtnSmQ from [LtnSmQ.Point ];
    sub LtnSmQStrk from [LtnSmQStrk.Point ];
    sub LtnSmQDiagStrk from [LtnSmQDiagStrk.Point ];
    sub LtnSmQHook from [LtnSmQHook.Point ];
} qtl_sub;

lookup q_sub {
  lookupflag 0;
    sub LtnCapQ from [LtnCapQ.DiagTail ];
    sub LtnCapQStrk from [LtnCapQStrk.DiagTail ];
    sub LtnCapQDiagStrk from [LtnCapQDiagStrk.DiagTail ];
    sub LtnSmCapQ from [LtnSmCapQ.DiagTail ] ;
    sub LtnSmQ.sc from [LtnSmQ.DiagTail.sc ];
    sub LtnSmQStrk.sc from [LtnSmQStrk.DiagTail.sc ];
    sub LtnSmQDiagStrk.sc from [LtnSmQDiagStrk.DiagTail.sc ];
} q_sub;
}

lookup rtl_sub {
  lookupflag 0;
    sub LtnCapRHookTail from [LtnCapSmRHookTail ];
    sub LtnSmRHookTail.sc from [LtnSmCapSmRHookTail ];
} rtl_sub;

# Andika
do let f = info("familyName");
   if f.find("Andika") != -1; {
lookup ttl_sub {
  lookupflag 0;
    sub @cno_NoTailT by @c_NoTailT;
} ttl_sub;
}

lookup thk_sub {
  lookupflag 0;
    sub LtnCapTHook from [LtnCapTHook.RtHook ];
    sub LtnSmTHook.sc from [LtnSmTHook.RtHook.sc ];
} thk_sub;

lookup vhk_sub {
  lookupflag 0;
    sub LtnSmVHook from [LtnSmVHook.StraightLft LtnSmVHook.StraightLftHighHook ];
    sub ModSmVHook from [ModSmVHook.StraightLft ModSmVHook.StraightLftHighHook ];
    sub LtnCapVHook from [LtnCapVHook.StraightLft LtnCapVHook.StraightLftHighHook ];
    sub LtnSmVHook.sc from [LtnSmVHook.StraightLft.sc LtnSmVHook.StraightLftHighHook.sc ];
} vhk_sub;

# Andika
do let f = info("familyName");
   if f.find("Andika") != -1; {
lookup ytl_sub {
  lookupflag 0;
    sub @cno_NoTailY by @c_NoTailY;
} ytl_sub;
}

lookup yhk_sub {
  lookupflag 0;
    sub LtnCapYHook.RtHook from [LtnCapYHook ];
    sub LtnSmYHook.RtHook.sc from [LtnSmYHook.sc ];
} yhk_sub;

lookup bascl_sub {
  lookupflag 0;
    sub @cno_bascl by @c_bascl;
} bascl_sub;

# c_Lrg does not contain correct glyphs for cv70
lookup apos_sub {
  lookupflag 0;
    sub LtnCapSaltillo from [LtnCapSaltillo.Lrg ];
    sub LtnSmSaltillo from [LtnSmSaltillo.Lrg ];
    sub LtnSmSaltillo.sc from [LtnSmSaltillo.Lrg.sc ];
    sub ModApos from [ModApos.Lrg ];
    sub CombTrndCommaAbv from [CombTrndCommaAbv.Lrg ];
    sub CombRevCommaAbv from [CombRevCommaAbv.Lrg ];
    sub ModTurnedComma from [ModTurnedComma.Lrg ];
    sub ModRevComma from [ModRevComma.Lrg ];
} apos_sub;

lookup colon_sub {
  lookupflag 0;
    sub ModLowColon from [ModLowColon.Wide ];
} colon_sub;

lookup ognk_sub {
  lookupflag 0;
    sub @cno_rtrhk by @c_rtrhk;
} ognk_sub;

lookup caron_sub {
  lookupflag 0;
    sub @cno_caron by @c_caron;
} caron_sub;

lookup kayan_grave_sub {
  lookupflag 0;
    sub @c_grave_comp by @c_grave_base CombGrave;
} kayan_grave_sub;

lookup kayan_grave_ctx {
  lookupflag 0;
    sub @c_grave_comp'lookup kayan_grave_sub CombAcute;
} kayan_grave_ctx;

lookup kayan_sub {
  lookupflag MarkAttachmentType @_U;
    sub CombGrave CombAcute by CombKayanGraveAcute;
} kayan_sub;

lookup mce_sub {
  lookupflag 0;
    sub CySmE from [CySmE.MongolStyle ];
    sub CyCapE from [CyCapE.MongolStyle ];
    sub CySmE.sc from [CySmE.MongolStyle.sc ];
} mce_sub;

lookup shha_sub {
  lookupflag 0;
    sub CySmShha from [CySmShha.UCStyle ];
} shha_sub;

lookup brvc_sub {
  lookupflag 0;
    sub CombBreve from [CombBreve.CyShortMrkAlt ];
} brvc_sub;

lookup chnntc_sub {
  lookupflag 0;
    sub ModVertLine from [ModVertLine.ChinantecTn ];
    sub ModAcuteAccent from [ModAcuteAccent.ChinantecTn ];
    sub ModGraveAccent from [ModGraveAccent.ChinantecTn ];
    sub ModMacron from [ModChinantecTnMrkHorizBar ];
} chnntc_sub;

lookup set_sub {
  lookupflag 0;
    sub EmptySet from [EmptySet.SlashZero ];
} set_sub;

# non-Andika
do let f = info("familyName");
   if f.find("Andika") == -1; {
lookup lit_sub {
  lookupflag 0;
    sub @cno_lit by @c_lit;
} lit_sub;

lookup lita_sub {
  lookupflag 0;
    sub @cno_lita by @c_lita;
} lita_sub;

lookup litg_sub {
  lookupflag 0;
    sub @cno_litg by @c_litg;
} litg_sub;
}

# Andika
do let f = info("familyName");
   if f.find("Andika") != -1; {
lookup lit_sub {
  lookupflag 0;
    sub @c_lit by @cno_lit;
} lit_sub;

lookup lita_sub {
  lookupflag 0;
    sub @c_lita by @cno_lita;
} lita_sub;

lookup litg_sub {
  lookupflag 0;
    sub @c_litg by @cno_litg;
} litg_sub;
}

lookup bbwl_sub {
  lookupflag 0;
    # sub @cno_BarBowl by @c_BarBowl; wrongly maps LtnSmG to LtnSmG.BarBowl
    sub @cno_barbowl by @c_barbowl;
    sub LtnSmGStrk by LtnSmG.BarBowl;
    sub LtnSmGStrk.SngBowl by LtnSmG.BarBowl.SngBowl;
    sub LtnSmGStrk.sc by LtnSmG.BarBowl.sc;
    sub LtnSmGStrk.SngBowl.sc by LtnSmG.BarBowl.SngBowl.sc;
} bbwl_sub;

lookup sital_sub {
  lookupflag 0;
    sub @cno_sital by @c_sital;
} sital_sub;

# Gentium
do let f = info("familyName");
   if f.find("Gentium") != -1; {

# define lookups for decomposing and recomposing greek diac seqs: grk_decomp_sub, grk_recomp_sub
#    also define grk_sc1_sub lookup for handling Greek small caps, including where diacritics are removed
#    and grk_sc2_sub lookup for handling Greek upper case base glyphs like lower case
include(../../source/opentype/grk_compose.feax);

# below are examples of content from grk_compose.feax for reference

# lookup grk_decomp_sub {
#   lookupflag 0;
#     sub GrCapAlphaWMacron by GrCapAlpha CombMacron;
# } grk_decomp_sub;

# lookup grk_recomp_sub {
#   lookupflag 0;
#     sub GrCapAlpha CombRevCommaAbv by GrCapAlphaWDasia;
# } grk_recomp_sub;

# lookup grk_sc1_sub {
#   lookupflag 0;
#     sub GrSmAlphaWDasiaOxiaYpo by GrSmAlphaWYpo.sc;
# } grk_sc1_sub;

# lookup grk_sc2_sub {
#   lookupflag 0;
#     sub GrCapAlphaWDasiaOxiaPros by GrSmAlphaWYpo.sc;
# } grk_sc2_sub;

lookup srfb_sub {
  lookupflag 0;
    sub GrSmBeta from [GrSmBeta.Serif ];
    sub GrSubSmBeta from [GrSubSmBeta.Serif ];
    sub ModSmBeta from [ModSmBeta.Serif ];
} srfb_sub;

lookup pcx_sub {
  lookupflag 0;
    sub @cno_Por by @c_Por;
} pcx_sub;

lookup iota_sub {
  lookupflag 0;
    sub @cno_iotasub by @c_iotasub;
} iota_sub;

lookup lpdiac_sub {
  lookupflag 0;
    sub @cno_lprof_diac by @c_lprof_diac;
} lpdiac_sub;

lookup lpdiac_ctx { # use in ccmp, for NFD text
  lookupflag UseMarkFilteringSet @cno_lprof_diac;
    sub @c_takes_lp_diac' @cno_lprof_diac'lookup lpdiac_sub @cno_lprof_diac'lookup lpdiac_sub 
      @cno_lprof_diac'lookup lpdiac_sub;
    sub @c_takes_lp_diac' @cno_lprof_diac'lookup lpdiac_sub @cno_lprof_diac'lookup lpdiac_sub;
    sub @c_takes_lp_diac' @cno_lprof_diac'lookup lpdiac_sub;
} lpdiac_ctx;

lookup lp_sub {
  lookupflag 0;
    sub @cno_lowprof by @c_lowprof;
} lp_sub;
}

languagesystem DFLT dflt;
languagesystem cyrl dflt;
languagesystem cyrl SRB;
languagesystem cyrl MKD;
languagesystem latn dflt;
languagesystem latn IPPH;
languagesystem latn VIT;
ifinfo(familyName, "Gentium") {
languagesystem grek dflt; # Gentium
}

feature aalt {
#  feature ccmp; #exclude because of tone ligatures
  feature locl;
  feature smcp;
  feature c2sc;
  feature sups;
  feature subs;
ifinfo(familyName, "Charis|Gentium") {
  feature lnum; #Charis & Gentium
  feature onum; #Charis & Gentium
}
#  feature liga; #cannot include many-to-one substitutions
ifinfo(familyName, "Andika") {
  feature cv01; #Andika
  feature cv04; #Andika
  feature cv06; #Andika
  feature cv07; #Andika
  feature cv09; #Andika
  feature cv10; #Andika
}
  feature cv13;
  feature cv17;
  feature cv19;
  feature cv20;
  feature cv25;
  feature cv28;
ifinfo(familyName, "Andika") {
  feature cv30; #Andika
  feature cv31; #Andika
  feature cv34; #Andika
  feature cv35; #Andika
}
  feature cv37;
ifinfo(familyName, "Andika") {
  feature cv39; #Andika
}
  feature cv43;
  feature cv44;
  feature cv46;
  feature cv47;
  feature cv49;
ifinfo(familyName, "Andika") {
  feature cv51; #Andika
  feature cv52; #Andika
}
  feature cv55;
  feature cv57;
  feature cv62;
ifinfo(familyName, "Andika") {
  feature cv67; #Andika
}
  feature cv68;
  feature cv69;
  feature cv70;
  feature cv71;
  feature cv75;
  feature cv76;
  feature cv77;
  feature cv80;
  feature cv81;
  feature cv82;
  feature cv84;
  feature cv90;
  feature cv91;
  feature cv92;
  feature cv98;
ifinfo(familyName, "Gentium") {
  feature cv14; #Gentium
  feature cv78; #Gentium
  feature cv83; #Gentium
}
  feature ss01;
  feature ss04;
  feature ss05;
ifinfo(familyName, "Gentium") {
  feature ss07; #Gentium
}
ifinfo(familyName, "Charis|Doulos|Gentium") {
  feature ss11; #non-Andika
  feature ss12; #non-Andika
}
ifinfo(familyName, "Andika") {
  feature ss13; #Andika
  feature ss14; #Andika
}
} aalt;

feature ccmp {
  lookup di_ctx;
  lookup ss_ctx;
  lookup y_ognk_sub;
  lookup dbl_diac_abv_move;
  lookup dbl_diac_blw_move;
  lookup dbl_diac_abv_raise_l;
  lookup dbl_diac_blw_lower_u;
  lookup dbl_diac_abv_move_seq;
  lookup dbl_diac_abv_raise_blw;
  lookup dbl_diac_abv_and_blw_move;
do let f = info("familyName");
   if f.find("Gentium") != -1; {
  lookup grk_decomp_sub;
  lookup grk_recomp_sub;
  lookup lpdiac_ctx; #Gentium
}
  lookup tn_ctx;
  lookup tne_ctx;

  script latn;
    language VIT;
      lookup vd_sub;
      lookup vc_sub;
} ccmp;

feature locl {
  script cyrl;
    language SRB  exclude_dflt; #Serbian
      lookup srb_sub;
    language MKD  exclude_dflt; #Macedonian
      lookup srb_sub;
} locl;

feature smcp {
  lookup sc1_sub;
do let f = info("familyName");
   if f.find("Gentium") != -1; {
  lookup grk_sc1_sub;
}
} smcp;

feature c2sc {
  lookup sc2_sub;
do let f = info("familyName");
   if f.find("Gentium") != -1; {
  lookup grk_sc2_sub;
}
} c2sc;

feature sups {
  lookup sups_sub;
} sups;

feature subs {
  lookup subs_sub;
} subs;

do let f = info("familyName");
   if f.find("Charis") != -1 or f.find("Gentium") != -1; {
feature lnum {
  lookup lnum_sub; #Charis & Gentium
} lnum;

feature onum {
  lookup onum_sub; #Charis & Gentium
} onum;
}

feature liga {
  lookup f_sub;
} liga;

feature frac {
  lookup frac_sub;
} frac;

# Andika
do let f = info("familyName");
   if f.find("Andika") != -1; {
feature cv01 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "One";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of numeral one without base";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "1₁¹";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "No base serif";  # English US
      };
  };

  lookup one_sub;
} cv01;

feature cv04 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Four";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of numeral four with open top";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "4₄⁴";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Open top";  # English US
      };
  };

  lookup four_sub;
} cv04;

feature cv06 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Six";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of numeral six with diagonal stem";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "6⁶₆⅙⅚";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Diagonal stem";  # English US
      };
  };

  lookup six_sub;
} cv06;

feature cv07 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Seven";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of numeral seven with bar";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "7₇⁷";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Barred";  # English US
      };
  };

  lookup seven_sub;
} cv07;

feature cv09 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Nine";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of numeral nine with diagonal stem";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "9⁹₉⅑";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Diagonal stem";  # English US
      };
  };

  lookup nine_sub;
} cv09;

feature cv10 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Zero";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of numeral zero with slash";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "0⁰₀";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Slashed";  # English US
      };
  };

  lookup zero_sub;
} cv10;
}

feature cv13 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Capital B hook";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of Capital B hook with single bowl and right hook";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "Ɓ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Single bowl";  # English US
      };
  };

  lookup bhk_sub;
} cv13;

feature cv17 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Capital D hook";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of Capital D hook with half bowl and right hook";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "Ɗ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Half bowl";  # English US
      };
  };

  lookup dhk_sub;
} cv17;

feature cv19 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Lowercase ezh curl";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of lowercase ezh curl with large bowl";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "ʓ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Large bowl";  # English US
      };
  };

  lookup ezhcurl_sub;
} cv19;

feature cv20 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Capital Ezh";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of capital Ezh that resembles a reversed Sigma";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "ƷӠ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Reversed sigma";  # English US
      };
  };

  lookup ezh_sub;
} cv20;

feature cv25 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Lowercase rams horn";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate forms of lowercase rams horn";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "ɤ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Large bowl";  # English US
      };

      ParamUILabelNameID {
       name 3 1 0x0409 "Small gamma";  # English US
      };
  };

  lookup rams_sub;
} cv25;

feature cv28 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Capital H stroke";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of capital H stroke with vertical stroke";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "Ħ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Vertical stroke";  # English US
      };
  };

  lookup hstrk_sub;
} cv28;

# Andika
do let f = info("familyName");
   if f.find("Andika") != -1; {
feature cv30 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Capital I";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of capital I with no bars";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "none";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Barless";  # English US
      };
  };

  lookup nobar_sub;
} cv30;

feature cv31 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Lowercase i";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of lowercase i with curved tail";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "iìíîï";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Curved tail";  # English US
      };
  };

  lookup itl_sub;
} cv31;

feature cv34 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Lowercase j";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of lowercase j with top serif";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "jĵǰȷɉɟʝʲᶡᶨⱼ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Top serif";  # English US
      };
  };

  lookup jsrf_sub;
} cv34;

feature cv35 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Capital J";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of capital J with bar across top";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "JĴɈᴊᴶꞲ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Top bar";  # English US
      };
  };

  lookup j_sub;
} cv35;
}

feature cv37 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Lowercase J stroke hook";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of lowercase j stroke hook with top serif";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "ʄ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Top serif";  # English US
      };
  };

  lookup jstrk_sub;
} cv37;

# Andika
do let f = info("familyName");
   if f.find("Andika") != -1; {
feature cv39 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Lowercase l";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of lowercase l with curved tail";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "lĺļľŀłƚ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Curved tail";  # English US
      };
  };

  lookup ltl_sub;
} cv39;
}

feature cv43 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Capital Eng";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate forms of capital Eng";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "Ŋ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Lowercase no descender";  # English US
      };

      ParamUILabelNameID {
       name 3 1 0x0409 "Capital form";  # English US
      };

      ParamUILabelNameID {
       name 3 1 0x0409 "Lowercase short stem";  # English US
      };
  };

  lookup engs_sub;
} cv43;

feature cv44 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Capital N left hook";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of capital N left hook with uppercase form";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "Ɲ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Uppercase form";  # English US
      };
  };

  lookup nhk_sub;
} cv44;

feature cv46 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Open O";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of open o with serif at the top";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "Ɔɔᴐᵓᶗ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Top serif";  # English US
      };
  };

  lookup opno_sub;
} cv46;

feature cv47 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "OU";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of ou with open top";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "Ȣȣᴕᴽ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Open top";  # English US
      };
  };

  lookup ou_sub;
} cv47;

feature cv49 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Lowercase p hook";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of lowercase p hook with hook on right";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "ƥ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Right hook";  # English US
      };
  };

  lookup phk_sub;
} cv49;

# Andika
do let f = info("familyName");
   if f.find("Andika") != -1; {
feature cv51 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Lowercase q";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of lowercase q with pointed descender";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "qʠꝗꝙ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Pointed";  # English US
      };
  };

  lookup qtl_sub;
} cv51;

feature cv52 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Capital Q";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of capital Q with crossing tail";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "QꝖꝘ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Crossing tail";  # English US
      };
  };

  lookup q_sub;
} cv52;
}

feature cv55 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Capital R tail";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of capital R tail with lowercase form";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "Ɽ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Lowercase form";  # English US
      };
  };

  lookup rtl_sub;
} cv55;

# Andika
do let f = info("familyName");
   if f.find("Andika") != -1; {
feature cv56 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Lowercase t";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of lowercase t with no tail";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "tţťŧƫƭ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "No tail";  # English US
      };
  };

  lookup ttl_sub;
} cv56;
}

feature cv57 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Capital T hook";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of capital T hook with hook on right";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "Ƭ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Right hook";  # English US
      };
  };

  lookup thk_sub;
} cv57;

feature cv62 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "V hook";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate forms of V hook";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "Ʋʋᶹ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Straight with low hook";  # English US
      };

      ParamUILabelNameID {
       name 3 1 0x0409 "Straight with high hook";  # English US
      };

  };

  lookup vhk_sub;
} cv62;

# Andika
do let f = info("familyName");
   if f.find("Andika") != -1; {
feature cv67 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Lowercase y";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of lowercase y with straight tail";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "yýÿŷƴ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Straight tail";  # English US
      };
  };

  lookup ytl_sub;
} cv67;
}

feature cv68 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Capital Y hook";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of capital Y hook with hook on left";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "ƴ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Left hook";  # English US
      };
  };

  lookup yhk_sub;
} cv68;

feature cv69 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Clicks";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of clicks that sit on baseline";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "ǀǁǂǃ⦀";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Baseline";  # English US
      };
  };

  lookup bascl_sub;
} cv69;

feature cv70 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Modifier apostrophe";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate larger form of modifier apostrophe";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "ʼꞋꞌʻʽ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Large";  # English US
      };
  };

  lookup apos_sub;
} cv70;

feature cv71 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Modifier colon";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate expanded form of modifier colon";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "꞉";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Expanded";  # English US
      };
  };

  lookup colon_sub;
} cv71;

feature cv75 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Vietnamese diacritics";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate Vietnamese forms of certain circumflex and breve diacritic combinations";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "sample_text";  # English US TODO: add sample_text
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Vietnamese style";  # English US
      };
  };

  lookup vd_sub;
  lookup vc_sub;
} cv75;

feature cv76 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Ogonek";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate straight form of ogonek";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "ĄąĘęĮįǫǪŲų";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Straight";  # English US
      };
  };

  lookup ognk_sub;
} cv76;

feature cv77 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Caron";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate global style form of caron";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "ďľĽť";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Global style";  # English US
      };
  };

  lookup caron_sub;
} cv77;

# this may not be a valid CV since it uses a many-to-one sub
feature cv79 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Kayan diacritics";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate side by side alignment of grave and acute for Kayan";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "sample_text";  # English US TODO: set sample_text
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Side by side";  # English US
      };
  };

  lookup kayan_grave_ctx;
  lookup kayan_sub;
} cv79;

feature cv80 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Cyrillic E";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate Mongolian style forms of Cyrillic E";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "Ээ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Mongolian style";  # English US
      };
  };

  lookup mce_sub;
} cv80;

feature cv81 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Cyrillic lowercase shha";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of Cyrillic lowercase shha based on capital form";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "һ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Capital form";  # English US
      };
  };

  lookup shha_sub;
} cv81;

feature cv82 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Cyrillic breve";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate Cyrillic form of breve";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "̆";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Cyrillic form";  # English US
      };
  };

  lookup brvc_sub;
} cv82;

feature cv84 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Cyr Serbian Macedonian";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate forms for Serbian and Macedonian";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "sample_text";  # English US TODO: set sample_text
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Serbian Macedonian forms";  # English US
      };
  };

  lookup srb_sub;
} cv84;

feature cv90 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Chinantec tones";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate Chinantec style forms of tone marks";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "ˈˉˊˋ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Chinantec style";  # English US
      };
  };

  lookup chnntc_sub;
} cv90;

feature cv91 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Tone letters";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate numeral forms of tone letters";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "˩˨˧˦˥꜖꜕꜔꜓꜒";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Numerals";  # English US
      };
  };

  lookup tnn_sub;
  lookup tnn_ctx;
} cv91;

feature cv92 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Tone contour staves";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of tone letters without contour staves";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "˩˨˧˦˥꜖꜕꜔꜓꜒";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Hidden";  # English US
      };
  };

  lookup tnh_sub;
} cv92;

feature cv98 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Empty set";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of empty set based on zero";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "∅";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Zero form";  # English US
      };
  };

  lookup set_sub;
} cv98;

# Gentium
do let f = info("familyName");
   if f.find("Gentium") != -1; {
feature cv14 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Lowercase beta";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate form of lowercase beta with serif on bottom";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "βᵦᵝ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "With serif";  # English US
      };
  };

  lookup srfb_sub;
} cv14;

feature cv78 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Greek circumflex";  # English US
      };
      
      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate Porsonic form of Greek circumflex";  # English US
      };
      
      SampleTextNameID {
       name 3 1 0x0409 "͂ἆἇἎἏἦἧἮἯἶἷἾἿὖὗὟὦὧὮὯᾆᾇᾎᾏᾖᾗᾞᾟᾦᾧᾮᾯᾶᾷ῀῁ῆῇ῏ῖῗ῟ῦῧῶῷ";  # English US
      };
      
      ParamUILabelNameID {
       name 3 1 0x0409 "Porsonic form";  # English US
      };
  };

  lookup pcx_sub;
} cv78;

feature cv83 {

  cvParameters {
      FeatUILabelNameID {
       name 3 1 0x0409 "Greek iota adscript";  # English US
      };

      FeatUITooltipTextNameID {
       name 3 1 0x0409 "Alternate subscript form of Greek iota adscript (ypogegrammeni)";  # English US
      };

      SampleTextNameID {
       name 3 1 0x0409 "sample_text";  # English US TODO: set sample_text
      };

      ParamUILabelNameID {
       name 3 1 0x0409 "Subscript";  # English US
      };
  };

  lookup iota_sub;
} cv83;
}

# non-Andika
do let f = info("familyName");
   if f.find("Andika") == -1; {
feature ss01 {
  featureNames {
    name 3 1 0x409 "Single-story a and g";
  };

  lookup lit_sub;
} ss01;

feature ss11 {
  featureNames {
    name 3 1 0x409 "Single-story a";
  };

  lookup lita_sub;
} ss11;

feature ss12 {
  featureNames {
    name 3 1 0x409 "Single-story g";
  };

  lookup litg_sub;
} ss12;
}

# Andika
do let f = info("familyName");
   if f.find("Andika") != -1; {
feature ss01 {
  featureNames {
    name 3 1 0x409 "Double-story a and g";
  };

  lookup lit_sub;
} ss01;

feature ss13 {
  featureNames {
    name 3 1 0x409 "Double-story a";
  };

  lookup lita_sub;
} ss13;

feature ss14 {
  featureNames {
    name 3 1 0x409 "Double-story g";
  };

  lookup litg_sub;
} ss14;
}

feature ss04 {
  featureNames {
    name 3 1 0x409 "Barred-bowl forms";
  };

  lookup bbwl_sub;
} ss04;

feature ss05 {
  featureNames {
    name 3 1 0x409 "Slanted italic specials";
  };

  lookup sital_sub;
} ss05;

# Gentium
do let f = info("familyName");
   if f.find("Gentium") != -1; {
feature ss07 {
  featureNames {
    name 3 1 0x409 "Low-profile diacritics";
  };

  lookup lp_sub;
} ss07;
}
